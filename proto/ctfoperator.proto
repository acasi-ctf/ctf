syntax = "proto3";

package ctf;

import "common.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/acasi-ctf/ctf/pb";
option java_package = "org.acasictf.ctf.proto";

/**
 * Request message for starting a new environment.
 */
message StartEnvironmentRequest {
  /**
   * ID of the challenge set.
   */
  UUID challenge_set_id = 1;

  /**
   * ID of the challenge template.
   */
  UUID challenge_id = 2;

  /**
   * UUID of the owner of this environment.
   */
  UUID challenge_owner = 3;
}

/**
 * Response message for starting a new environment.
 */
message StartEnvironmentResponse {
  oneof response {
    StartEnvironmentSuccessResponse success = 1;
    StartEnvironmentFailureResponse failure = 2;
  }
}

message StartEnvironmentSuccessResponse {
  /**
   * This is a UUID that uniquely identifies an environment.
   */
  UUID environment_id = 1;
}

message StartEnvironmentFailureResponse {
}

/**
 * Request message for stopping an environment.
 */
message StopEnvironmentRequest {
  UUID environment_id = 1;
}

/**
 * Response message for stopping an environment.
 */
message StopEnvironmentResponse {
}

/**
 * Request message for uploading a challenge template.
 */
message UploadEnvironmentTemplateRequest {
  bytes env_zip = 1;
}

/**
 * gRPC service used to provision environments.
 */
service EnvironmentProvisioningService {
  rpc StartEnvironment(StartEnvironmentRequest)
      returns (StartEnvironmentResponse);
  rpc StopEnvironment(StopEnvironmentRequest) returns (StopEnvironmentResponse);
  rpc UploadEnvironmentTemplate(UploadEnvironmentTemplateRequest)
      returns (google.protobuf.Empty);
}

message IsEnvironmentReadyRequest {
  UUID environment_id = 1;
}

message IsEnvironmentReadyResponse {
  bool ready = 1;
}

message GetEnvironmentInfoRequest {
  UUID environment_id = 1;
}

message GetEnvironmentInfoResponse {
  string ssh_host = 1;
  int32 ssh_port = 2;
}

message ListUserEnvironmentsRequest {
  UUID user_id = 1;
}

message UserEnvironmentInfo {
  UUID env_id = 1;
  UUID challenge_set_id = 2;
  UUID challenge_id = 3;
}

message ListUserEnvironmentsResponse {
  repeated UserEnvironmentInfo environments = 1;
}

service EnvironmentLookupService {
  rpc IsEnvironmentReady(IsEnvironmentReadyRequest) returns
      (IsEnvironmentReadyResponse);
  rpc GetEnvironmentInfo(GetEnvironmentInfoRequest) returns
      (GetEnvironmentInfoResponse) {
    // TODO: Create generic services lookup method, hardcoded to one SSH service
    option deprecated = true;
  }
  rpc ListUserEnvironments(ListUserEnvironmentsRequest) returns
      (ListUserEnvironmentsResponse);
}
