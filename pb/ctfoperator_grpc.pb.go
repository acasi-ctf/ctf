// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvironmentProvisioningServiceClient is the client API for EnvironmentProvisioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentProvisioningServiceClient interface {
	StartEnvironment(ctx context.Context, in *StartEnvironmentRequest, opts ...grpc.CallOption) (*StartEnvironmentResponse, error)
	StopEnvironment(ctx context.Context, in *StopEnvironmentRequest, opts ...grpc.CallOption) (*StopEnvironmentResponse, error)
	UploadEnvironmentTemplate(ctx context.Context, in *UploadEnvironmentTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type environmentProvisioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentProvisioningServiceClient(cc grpc.ClientConnInterface) EnvironmentProvisioningServiceClient {
	return &environmentProvisioningServiceClient{cc}
}

func (c *environmentProvisioningServiceClient) StartEnvironment(ctx context.Context, in *StartEnvironmentRequest, opts ...grpc.CallOption) (*StartEnvironmentResponse, error) {
	out := new(StartEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentProvisioningService/StartEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentProvisioningServiceClient) StopEnvironment(ctx context.Context, in *StopEnvironmentRequest, opts ...grpc.CallOption) (*StopEnvironmentResponse, error) {
	out := new(StopEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentProvisioningService/StopEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentProvisioningServiceClient) UploadEnvironmentTemplate(ctx context.Context, in *UploadEnvironmentTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentProvisioningService/UploadEnvironmentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentProvisioningServiceServer is the server API for EnvironmentProvisioningService service.
// All implementations must embed UnimplementedEnvironmentProvisioningServiceServer
// for forward compatibility
type EnvironmentProvisioningServiceServer interface {
	StartEnvironment(context.Context, *StartEnvironmentRequest) (*StartEnvironmentResponse, error)
	StopEnvironment(context.Context, *StopEnvironmentRequest) (*StopEnvironmentResponse, error)
	UploadEnvironmentTemplate(context.Context, *UploadEnvironmentTemplateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEnvironmentProvisioningServiceServer()
}

// UnimplementedEnvironmentProvisioningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentProvisioningServiceServer struct {
}

func (UnimplementedEnvironmentProvisioningServiceServer) StartEnvironment(context.Context, *StartEnvironmentRequest) (*StartEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEnvironment not implemented")
}
func (UnimplementedEnvironmentProvisioningServiceServer) StopEnvironment(context.Context, *StopEnvironmentRequest) (*StopEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEnvironment not implemented")
}
func (UnimplementedEnvironmentProvisioningServiceServer) UploadEnvironmentTemplate(context.Context, *UploadEnvironmentTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEnvironmentTemplate not implemented")
}
func (UnimplementedEnvironmentProvisioningServiceServer) mustEmbedUnimplementedEnvironmentProvisioningServiceServer() {
}

// UnsafeEnvironmentProvisioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentProvisioningServiceServer will
// result in compilation errors.
type UnsafeEnvironmentProvisioningServiceServer interface {
	mustEmbedUnimplementedEnvironmentProvisioningServiceServer()
}

func RegisterEnvironmentProvisioningServiceServer(s grpc.ServiceRegistrar, srv EnvironmentProvisioningServiceServer) {
	s.RegisterService(&EnvironmentProvisioningService_ServiceDesc, srv)
}

func _EnvironmentProvisioningService_StartEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentProvisioningServiceServer).StartEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentProvisioningService/StartEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentProvisioningServiceServer).StartEnvironment(ctx, req.(*StartEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentProvisioningService_StopEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentProvisioningServiceServer).StopEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentProvisioningService/StopEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentProvisioningServiceServer).StopEnvironment(ctx, req.(*StopEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentProvisioningService_UploadEnvironmentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadEnvironmentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentProvisioningServiceServer).UploadEnvironmentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentProvisioningService/UploadEnvironmentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentProvisioningServiceServer).UploadEnvironmentTemplate(ctx, req.(*UploadEnvironmentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentProvisioningService_ServiceDesc is the grpc.ServiceDesc for EnvironmentProvisioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentProvisioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctf.EnvironmentProvisioningService",
	HandlerType: (*EnvironmentProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartEnvironment",
			Handler:    _EnvironmentProvisioningService_StartEnvironment_Handler,
		},
		{
			MethodName: "StopEnvironment",
			Handler:    _EnvironmentProvisioningService_StopEnvironment_Handler,
		},
		{
			MethodName: "UploadEnvironmentTemplate",
			Handler:    _EnvironmentProvisioningService_UploadEnvironmentTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctfoperator.proto",
}

// EnvironmentLookupServiceClient is the client API for EnvironmentLookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentLookupServiceClient interface {
	IsEnvironmentReady(ctx context.Context, in *IsEnvironmentReadyRequest, opts ...grpc.CallOption) (*IsEnvironmentReadyResponse, error)
	// Deprecated: Do not use.
	GetEnvironmentInfo(ctx context.Context, in *GetEnvironmentInfoRequest, opts ...grpc.CallOption) (*GetEnvironmentInfoResponse, error)
	ListUserEnvironments(ctx context.Context, in *ListUserEnvironmentsRequest, opts ...grpc.CallOption) (*ListUserEnvironmentsResponse, error)
}

type environmentLookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentLookupServiceClient(cc grpc.ClientConnInterface) EnvironmentLookupServiceClient {
	return &environmentLookupServiceClient{cc}
}

func (c *environmentLookupServiceClient) IsEnvironmentReady(ctx context.Context, in *IsEnvironmentReadyRequest, opts ...grpc.CallOption) (*IsEnvironmentReadyResponse, error) {
	out := new(IsEnvironmentReadyResponse)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentLookupService/IsEnvironmentReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *environmentLookupServiceClient) GetEnvironmentInfo(ctx context.Context, in *GetEnvironmentInfoRequest, opts ...grpc.CallOption) (*GetEnvironmentInfoResponse, error) {
	out := new(GetEnvironmentInfoResponse)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentLookupService/GetEnvironmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentLookupServiceClient) ListUserEnvironments(ctx context.Context, in *ListUserEnvironmentsRequest, opts ...grpc.CallOption) (*ListUserEnvironmentsResponse, error) {
	out := new(ListUserEnvironmentsResponse)
	err := c.cc.Invoke(ctx, "/ctf.EnvironmentLookupService/ListUserEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentLookupServiceServer is the server API for EnvironmentLookupService service.
// All implementations must embed UnimplementedEnvironmentLookupServiceServer
// for forward compatibility
type EnvironmentLookupServiceServer interface {
	IsEnvironmentReady(context.Context, *IsEnvironmentReadyRequest) (*IsEnvironmentReadyResponse, error)
	// Deprecated: Do not use.
	GetEnvironmentInfo(context.Context, *GetEnvironmentInfoRequest) (*GetEnvironmentInfoResponse, error)
	ListUserEnvironments(context.Context, *ListUserEnvironmentsRequest) (*ListUserEnvironmentsResponse, error)
	mustEmbedUnimplementedEnvironmentLookupServiceServer()
}

// UnimplementedEnvironmentLookupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentLookupServiceServer struct {
}

func (UnimplementedEnvironmentLookupServiceServer) IsEnvironmentReady(context.Context, *IsEnvironmentReadyRequest) (*IsEnvironmentReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEnvironmentReady not implemented")
}
func (UnimplementedEnvironmentLookupServiceServer) GetEnvironmentInfo(context.Context, *GetEnvironmentInfoRequest) (*GetEnvironmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentInfo not implemented")
}
func (UnimplementedEnvironmentLookupServiceServer) ListUserEnvironments(context.Context, *ListUserEnvironmentsRequest) (*ListUserEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserEnvironments not implemented")
}
func (UnimplementedEnvironmentLookupServiceServer) mustEmbedUnimplementedEnvironmentLookupServiceServer() {
}

// UnsafeEnvironmentLookupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentLookupServiceServer will
// result in compilation errors.
type UnsafeEnvironmentLookupServiceServer interface {
	mustEmbedUnimplementedEnvironmentLookupServiceServer()
}

func RegisterEnvironmentLookupServiceServer(s grpc.ServiceRegistrar, srv EnvironmentLookupServiceServer) {
	s.RegisterService(&EnvironmentLookupService_ServiceDesc, srv)
}

func _EnvironmentLookupService_IsEnvironmentReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEnvironmentReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentLookupServiceServer).IsEnvironmentReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentLookupService/IsEnvironmentReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentLookupServiceServer).IsEnvironmentReady(ctx, req.(*IsEnvironmentReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentLookupService_GetEnvironmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentLookupServiceServer).GetEnvironmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentLookupService/GetEnvironmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentLookupServiceServer).GetEnvironmentInfo(ctx, req.(*GetEnvironmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentLookupService_ListUserEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentLookupServiceServer).ListUserEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctf.EnvironmentLookupService/ListUserEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentLookupServiceServer).ListUserEnvironments(ctx, req.(*ListUserEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentLookupService_ServiceDesc is the grpc.ServiceDesc for EnvironmentLookupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentLookupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctf.EnvironmentLookupService",
	HandlerType: (*EnvironmentLookupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEnvironmentReady",
			Handler:    _EnvironmentLookupService_IsEnvironmentReady_Handler,
		},
		{
			MethodName: "GetEnvironmentInfo",
			Handler:    _EnvironmentLookupService_GetEnvironmentInfo_Handler,
		},
		{
			MethodName: "ListUserEnvironments",
			Handler:    _EnvironmentLookupService_ListUserEnvironments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctfoperator.proto",
}
