// source: termproxy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.ClientMessage', null, global);
goog.exportSymbol('proto.ClientMessage.MessageCase', null, global);
goog.exportSymbol('proto.CloseConnectionMessage', null, global);
goog.exportSymbol('proto.OpenConnectionMessage', null, global);
goog.exportSymbol('proto.ServerMessage', null, global);
goog.exportSymbol('proto.ServerMessage.MessageCase', null, global);
goog.exportSymbol('proto.StreamMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientMessage.oneofGroups_);
};
goog.inherits(proto.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClientMessage.displayName = 'proto.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.oneofGroups_);
};
goog.inherits(proto.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.displayName = 'proto.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OpenConnectionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OpenConnectionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OpenConnectionMessage.displayName = 'proto.OpenConnectionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloseConnectionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloseConnectionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloseConnectionMessage.displayName = 'proto.CloseConnectionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamMessage.displayName = 'proto.StreamMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  OPEN_CONNECTION: 1,
  STDIN: 2
};

/**
 * @return {proto.ClientMessage.MessageCase}
 */
proto.ClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    openConnection: (f = msg.getOpenConnection()) && proto.OpenConnectionMessage.toObject(includeInstance, f),
    stdin: (f = msg.getStdin()) && proto.StreamMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMessage;
  return proto.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OpenConnectionMessage;
      reader.readMessage(value,proto.OpenConnectionMessage.deserializeBinaryFromReader);
      msg.setOpenConnection(value);
      break;
    case 2:
      var value = new proto.StreamMessage;
      reader.readMessage(value,proto.StreamMessage.deserializeBinaryFromReader);
      msg.setStdin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OpenConnectionMessage.serializeBinaryToWriter
    );
  }
  f = message.getStdin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StreamMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional OpenConnectionMessage open_connection = 1;
 * @return {?proto.OpenConnectionMessage}
 */
proto.ClientMessage.prototype.getOpenConnection = function() {
  return /** @type{?proto.OpenConnectionMessage} */ (
    jspb.Message.getWrapperField(this, proto.OpenConnectionMessage, 1));
};


/**
 * @param {?proto.OpenConnectionMessage|undefined} value
 * @return {!proto.ClientMessage} returns this
*/
proto.ClientMessage.prototype.setOpenConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClientMessage} returns this
 */
proto.ClientMessage.prototype.clearOpenConnection = function() {
  return this.setOpenConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClientMessage.prototype.hasOpenConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamMessage stdin = 2;
 * @return {?proto.StreamMessage}
 */
proto.ClientMessage.prototype.getStdin = function() {
  return /** @type{?proto.StreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.StreamMessage, 2));
};


/**
 * @param {?proto.StreamMessage|undefined} value
 * @return {!proto.ClientMessage} returns this
*/
proto.ClientMessage.prototype.setStdin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClientMessage} returns this
 */
proto.ClientMessage.prototype.clearStdin = function() {
  return this.setStdin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClientMessage.prototype.hasStdin = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ServerMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CLOSE_CONNECTION: 1,
  STDOUT: 2,
  STDERR: 3
};

/**
 * @return {proto.ServerMessage.MessageCase}
 */
proto.ServerMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ServerMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    closeConnection: (f = msg.getCloseConnection()) && proto.CloseConnectionMessage.toObject(includeInstance, f),
    stdout: (f = msg.getStdout()) && proto.StreamMessage.toObject(includeInstance, f),
    stderr: (f = msg.getStderr()) && proto.StreamMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage;
  return proto.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CloseConnectionMessage;
      reader.readMessage(value,proto.CloseConnectionMessage.deserializeBinaryFromReader);
      msg.setCloseConnection(value);
      break;
    case 2:
      var value = new proto.StreamMessage;
      reader.readMessage(value,proto.StreamMessage.deserializeBinaryFromReader);
      msg.setStdout(value);
      break;
    case 3:
      var value = new proto.StreamMessage;
      reader.readMessage(value,proto.StreamMessage.deserializeBinaryFromReader);
      msg.setStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCloseConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CloseConnectionMessage.serializeBinaryToWriter
    );
  }
  f = message.getStdout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StreamMessage.serializeBinaryToWriter
    );
  }
  f = message.getStderr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.StreamMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional CloseConnectionMessage close_connection = 1;
 * @return {?proto.CloseConnectionMessage}
 */
proto.ServerMessage.prototype.getCloseConnection = function() {
  return /** @type{?proto.CloseConnectionMessage} */ (
    jspb.Message.getWrapperField(this, proto.CloseConnectionMessage, 1));
};


/**
 * @param {?proto.CloseConnectionMessage|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setCloseConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearCloseConnection = function() {
  return this.setCloseConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasCloseConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamMessage stdout = 2;
 * @return {?proto.StreamMessage}
 */
proto.ServerMessage.prototype.getStdout = function() {
  return /** @type{?proto.StreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.StreamMessage, 2));
};


/**
 * @param {?proto.StreamMessage|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setStdout = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearStdout = function() {
  return this.setStdout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasStdout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StreamMessage stderr = 3;
 * @return {?proto.StreamMessage}
 */
proto.ServerMessage.prototype.getStderr = function() {
  return /** @type{?proto.StreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.StreamMessage, 3));
};


/**
 * @param {?proto.StreamMessage|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setStderr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearStderr = function() {
  return this.setStderr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasStderr = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OpenConnectionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.OpenConnectionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OpenConnectionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenConnectionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentId: (f = msg.getEnvironmentId()) && common_pb.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OpenConnectionMessage}
 */
proto.OpenConnectionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OpenConnectionMessage;
  return proto.OpenConnectionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OpenConnectionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OpenConnectionMessage}
 */
proto.OpenConnectionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.UUID;
      reader.readMessage(value,common_pb.UUID.deserializeBinaryFromReader);
      msg.setEnvironmentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OpenConnectionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OpenConnectionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OpenConnectionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenConnectionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional ctf.UUID environment_id = 1;
 * @return {?proto.ctf.UUID}
 */
proto.OpenConnectionMessage.prototype.getEnvironmentId = function() {
  return /** @type{?proto.ctf.UUID} */ (
    jspb.Message.getWrapperField(this, common_pb.UUID, 1));
};


/**
 * @param {?proto.ctf.UUID|undefined} value
 * @return {!proto.OpenConnectionMessage} returns this
*/
proto.OpenConnectionMessage.prototype.setEnvironmentId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OpenConnectionMessage} returns this
 */
proto.OpenConnectionMessage.prototype.clearEnvironmentId = function() {
  return this.setEnvironmentId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OpenConnectionMessage.prototype.hasEnvironmentId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloseConnectionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.CloseConnectionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloseConnectionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseConnectionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloseConnectionMessage}
 */
proto.CloseConnectionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloseConnectionMessage;
  return proto.CloseConnectionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloseConnectionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloseConnectionMessage}
 */
proto.CloseConnectionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloseConnectionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloseConnectionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloseConnectionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseConnectionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamMessage}
 */
proto.StreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamMessage;
  return proto.StreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamMessage}
 */
proto.StreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contents = 1;
 * @return {!(string|Uint8Array)}
 */
proto.StreamMessage.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contents = 1;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.StreamMessage.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.StreamMessage.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.StreamMessage} returns this
 */
proto.StreamMessage.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto);
